
A6_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001848  08001848  00002848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018ac  080018ac  00003010  2**0
                  CONTENTS
  4 .ARM          00000000  080018ac  080018ac  00003010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018ac  080018ac  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018ac  080018ac  000028ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018b0  080018b0  000028b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080018b4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000010  080018c4  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  080018c4  00003064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004606  00000000  00000000  00003040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f90  00000000  00000000  00007646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000578  00000000  00000000  000085d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003fe  00000000  00000000  00008b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a5f  00000000  00000000  00008f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000052b4  00000000  00000000  0002d9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1877  00000000  00000000  00032c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001144d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001448  00000000  00000000  0011451c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00115964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001830 	.word	0x08001830

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001830 	.word	0x08001830

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <main>:
uint16_t min = LARGE_NUMBER;
uint32_t average = RESET;


int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
  HAL_Init();
 800020a:	f000 fb5e 	bl	80008ca <HAL_Init>
  SystemClock_Config();
 800020e:	f000 fa81 	bl	8000714 <SystemClock_Config>
  ADC_init();
 8000212:	f000 f98d 	bl	8000530 <ADC_init>
  UART_init();
 8000216:	f000 fa1f 	bl	8000658 <UART_init>
  NVIC_EnableIRQ(USART2_IRQn);
 800021a:	2026      	movs	r0, #38	@ 0x26
 800021c:	f7ff ffd4 	bl	80001c8 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000220:	b662      	cpsie	i
}
 8000222:	bf00      	nop
  __enable_irq();
  UART_print("\033[2J\033[H");   //clear and go top left
 8000224:	4896      	ldr	r0, [pc, #600]	@ (8000480 <main+0x27c>)
 8000226:	f000 fa55 	bl	80006d4 <UART_print>


  ADC1->CR |= ADC_CR_ADSTART; //start conversion
 800022a:	4b96      	ldr	r3, [pc, #600]	@ (8000484 <main+0x280>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	4a95      	ldr	r2, [pc, #596]	@ (8000484 <main+0x280>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6093      	str	r3, [r2, #8]

  while (1)
  {

	  if(conversion_ready & (value_count <= TOTAL_DATA_COUNT))
 8000236:	4b94      	ldr	r3, [pc, #592]	@ (8000488 <main+0x284>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	461a      	mov	r2, r3
 800023c:	4b93      	ldr	r3, [pc, #588]	@ (800048c <main+0x288>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b14      	cmp	r3, #20
 8000242:	bf94      	ite	ls
 8000244:	2301      	movls	r3, #1
 8000246:	2300      	movhi	r3, #0
 8000248:	b2db      	uxtb	r3, r3
 800024a:	4013      	ands	r3, r2
 800024c:	2b00      	cmp	r3, #0
 800024e:	d014      	beq.n	800027a <main+0x76>
	  {
		  values[value_count++] = reading_data;
 8000250:	4b8e      	ldr	r3, [pc, #568]	@ (800048c <main+0x288>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	1c5a      	adds	r2, r3, #1
 8000256:	b2d1      	uxtb	r1, r2
 8000258:	4a8c      	ldr	r2, [pc, #560]	@ (800048c <main+0x288>)
 800025a:	7011      	strb	r1, [r2, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b8c      	ldr	r3, [pc, #560]	@ (8000490 <main+0x28c>)
 8000260:	8819      	ldrh	r1, [r3, #0]
 8000262:	4b8c      	ldr	r3, [pc, #560]	@ (8000494 <main+0x290>)
 8000264:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  conversion_ready = RESET;
 8000268:	4b87      	ldr	r3, [pc, #540]	@ (8000488 <main+0x284>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
		  ADC1->CR |= ADC_CR_ADSTART;
 800026e:	4b85      	ldr	r3, [pc, #532]	@ (8000484 <main+0x280>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	4a84      	ldr	r2, [pc, #528]	@ (8000484 <main+0x280>)
 8000274:	f043 0304 	orr.w	r3, r3, #4
 8000278:	6093      	str	r3, [r2, #8]
	  }
	  if((value_count > TOTAL_DATA_COUNT))
 800027a:	4b84      	ldr	r3, [pc, #528]	@ (800048c <main+0x288>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b14      	cmp	r3, #20
 8000280:	d9d9      	bls.n	8000236 <main+0x32>
	  {
		  for(uint8_t i = 0; i < TOTAL_DATA_COUNT; i++)
 8000282:	2300      	movs	r3, #0
 8000284:	71fb      	strb	r3, [r7, #7]
 8000286:	e028      	b.n	80002da <main+0xd6>
		  {
			  if(values[i] < min)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4a82      	ldr	r2, [pc, #520]	@ (8000494 <main+0x290>)
 800028c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000290:	4b81      	ldr	r3, [pc, #516]	@ (8000498 <main+0x294>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	429a      	cmp	r2, r3
 8000296:	d205      	bcs.n	80002a4 <main+0xa0>
			  {
				  min = values[i];
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	4a7e      	ldr	r2, [pc, #504]	@ (8000494 <main+0x290>)
 800029c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002a0:	4b7d      	ldr	r3, [pc, #500]	@ (8000498 <main+0x294>)
 80002a2:	801a      	strh	r2, [r3, #0]
			  }
			  if(values[i] > max)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	4a7b      	ldr	r2, [pc, #492]	@ (8000494 <main+0x290>)
 80002a8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002ac:	4b7b      	ldr	r3, [pc, #492]	@ (800049c <main+0x298>)
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d905      	bls.n	80002c0 <main+0xbc>
			  {
				  max = values[i];
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4a77      	ldr	r2, [pc, #476]	@ (8000494 <main+0x290>)
 80002b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002bc:	4b77      	ldr	r3, [pc, #476]	@ (800049c <main+0x298>)
 80002be:	801a      	strh	r2, [r3, #0]
			  }
			  average += values[i];
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4a74      	ldr	r2, [pc, #464]	@ (8000494 <main+0x290>)
 80002c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b75      	ldr	r3, [pc, #468]	@ (80004a0 <main+0x29c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4413      	add	r3, r2
 80002d0:	4a73      	ldr	r2, [pc, #460]	@ (80004a0 <main+0x29c>)
 80002d2:	6013      	str	r3, [r2, #0]
		  for(uint8_t i = 0; i < TOTAL_DATA_COUNT; i++)
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	3301      	adds	r3, #1
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b13      	cmp	r3, #19
 80002de:	d9d3      	bls.n	8000288 <main+0x84>
		  }

		  average /= 20;
 80002e0:	4b6f      	ldr	r3, [pc, #444]	@ (80004a0 <main+0x29c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a6f      	ldr	r2, [pc, #444]	@ (80004a4 <main+0x2a0>)
 80002e6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ea:	091b      	lsrs	r3, r3, #4
 80002ec:	4a6c      	ldr	r2, [pc, #432]	@ (80004a0 <main+0x29c>)
 80002ee:	6013      	str	r3, [r2, #0]

		  //all 10's and 100's are to select the three different digits individually to get the voltage value to two decimal points
		  UART_print("max: ");
 80002f0:	486d      	ldr	r0, [pc, #436]	@ (80004a8 <main+0x2a4>)
 80002f2:	f000 f9ef 	bl	80006d4 <UART_print>
		  UART_print('0' + (voltage_calibration(max) / 100));
 80002f6:	4b69      	ldr	r3, [pc, #420]	@ (800049c <main+0x298>)
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f8de 	bl	80004bc <voltage_calibration>
 8000300:	4603      	mov	r3, r0
 8000302:	4a6a      	ldr	r2, [pc, #424]	@ (80004ac <main+0x2a8>)
 8000304:	fba2 2303 	umull	r2, r3, r2, r3
 8000308:	095b      	lsrs	r3, r3, #5
 800030a:	3330      	adds	r3, #48	@ 0x30
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f9e1 	bl	80006d4 <UART_print>
		  UART_print('0' + ((voltage_calibration(max) / 10) % 10));
 8000312:	4b62      	ldr	r3, [pc, #392]	@ (800049c <main+0x298>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f8d0 	bl	80004bc <voltage_calibration>
 800031c:	4603      	mov	r3, r0
 800031e:	4a61      	ldr	r2, [pc, #388]	@ (80004a4 <main+0x2a0>)
 8000320:	fba2 2303 	umull	r2, r3, r2, r3
 8000324:	08d9      	lsrs	r1, r3, #3
 8000326:	4b5f      	ldr	r3, [pc, #380]	@ (80004a4 <main+0x2a0>)
 8000328:	fba3 2301 	umull	r2, r3, r3, r1
 800032c:	08da      	lsrs	r2, r3, #3
 800032e:	4613      	mov	r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	4413      	add	r3, r2
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	1aca      	subs	r2, r1, r3
 8000338:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f9c9 	bl	80006d4 <UART_print>
		  UART_print('0' + (voltage_calibration(max) % 10));
 8000342:	4b56      	ldr	r3, [pc, #344]	@ (800049c <main+0x298>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f8b8 	bl	80004bc <voltage_calibration>
 800034c:	4601      	mov	r1, r0
 800034e:	4b55      	ldr	r3, [pc, #340]	@ (80004a4 <main+0x2a0>)
 8000350:	fba3 2301 	umull	r2, r3, r3, r1
 8000354:	08da      	lsrs	r2, r3, #3
 8000356:	4613      	mov	r3, r2
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	4413      	add	r3, r2
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	1aca      	subs	r2, r1, r3
 8000360:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f9b5 	bl	80006d4 <UART_print>

		  UART_print("min: ");
 800036a:	4851      	ldr	r0, [pc, #324]	@ (80004b0 <main+0x2ac>)
 800036c:	f000 f9b2 	bl	80006d4 <UART_print>
		  UART_print('0' + (voltage_calibration(min) / 100));
 8000370:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <main+0x294>)
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f8a1 	bl	80004bc <voltage_calibration>
 800037a:	4603      	mov	r3, r0
 800037c:	4a4b      	ldr	r2, [pc, #300]	@ (80004ac <main+0x2a8>)
 800037e:	fba2 2303 	umull	r2, r3, r2, r3
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	3330      	adds	r3, #48	@ 0x30
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f9a4 	bl	80006d4 <UART_print>
		  UART_print('0' + ((voltage_calibration(min) / 10) % 10));
 800038c:	4b42      	ldr	r3, [pc, #264]	@ (8000498 <main+0x294>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	4618      	mov	r0, r3
 8000392:	f000 f893 	bl	80004bc <voltage_calibration>
 8000396:	4603      	mov	r3, r0
 8000398:	4a42      	ldr	r2, [pc, #264]	@ (80004a4 <main+0x2a0>)
 800039a:	fba2 2303 	umull	r2, r3, r2, r3
 800039e:	08d9      	lsrs	r1, r3, #3
 80003a0:	4b40      	ldr	r3, [pc, #256]	@ (80004a4 <main+0x2a0>)
 80003a2:	fba3 2301 	umull	r2, r3, r3, r1
 80003a6:	08da      	lsrs	r2, r3, #3
 80003a8:	4613      	mov	r3, r2
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	4413      	add	r3, r2
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	1aca      	subs	r2, r1, r3
 80003b2:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f98c 	bl	80006d4 <UART_print>
		  UART_print('0' + (voltage_calibration(min) % 10));
 80003bc:	4b36      	ldr	r3, [pc, #216]	@ (8000498 <main+0x294>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f87b 	bl	80004bc <voltage_calibration>
 80003c6:	4601      	mov	r1, r0
 80003c8:	4b36      	ldr	r3, [pc, #216]	@ (80004a4 <main+0x2a0>)
 80003ca:	fba3 2301 	umull	r2, r3, r3, r1
 80003ce:	08da      	lsrs	r2, r3, #3
 80003d0:	4613      	mov	r3, r2
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	4413      	add	r3, r2
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	1aca      	subs	r2, r1, r3
 80003da:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f978 	bl	80006d4 <UART_print>

		  UART_print("ave: ");
 80003e4:	4833      	ldr	r0, [pc, #204]	@ (80004b4 <main+0x2b0>)
 80003e6:	f000 f975 	bl	80006d4 <UART_print>
		  UART_print('0' + (voltage_calibration(average) / 100));
 80003ea:	4b2d      	ldr	r3, [pc, #180]	@ (80004a0 <main+0x29c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f864 	bl	80004bc <voltage_calibration>
 80003f4:	4603      	mov	r3, r0
 80003f6:	4a2d      	ldr	r2, [pc, #180]	@ (80004ac <main+0x2a8>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	095b      	lsrs	r3, r3, #5
 80003fe:	3330      	adds	r3, #48	@ 0x30
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f967 	bl	80006d4 <UART_print>
		  UART_print('0' + ((voltage_calibration(average) / 10) % 10));
 8000406:	4b26      	ldr	r3, [pc, #152]	@ (80004a0 <main+0x29c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f856 	bl	80004bc <voltage_calibration>
 8000410:	4603      	mov	r3, r0
 8000412:	4a24      	ldr	r2, [pc, #144]	@ (80004a4 <main+0x2a0>)
 8000414:	fba2 2303 	umull	r2, r3, r2, r3
 8000418:	08d9      	lsrs	r1, r3, #3
 800041a:	4b22      	ldr	r3, [pc, #136]	@ (80004a4 <main+0x2a0>)
 800041c:	fba3 2301 	umull	r2, r3, r3, r1
 8000420:	08da      	lsrs	r2, r3, #3
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	1aca      	subs	r2, r1, r3
 800042c:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000430:	4618      	mov	r0, r3
 8000432:	f000 f94f 	bl	80006d4 <UART_print>
		  UART_print('0' + (voltage_calibration(average) % 10));
 8000436:	4b1a      	ldr	r3, [pc, #104]	@ (80004a0 <main+0x29c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f83e 	bl	80004bc <voltage_calibration>
 8000440:	4601      	mov	r1, r0
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <main+0x2a0>)
 8000444:	fba3 2301 	umull	r2, r3, r3, r1
 8000448:	08da      	lsrs	r2, r3, #3
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	1aca      	subs	r2, r1, r3
 8000454:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f93b 	bl	80006d4 <UART_print>

		  //Reset
		  value_count = RESET;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <main+0x288>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
		  max = RESET;
 8000464:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <main+0x298>)
 8000466:	2200      	movs	r2, #0
 8000468:	801a      	strh	r2, [r3, #0]
		  min = LARGE_NUMBER;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <main+0x294>)
 800046c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000470:	801a      	strh	r2, [r3, #0]
		  UART_print("\033[H");
 8000472:	4811      	ldr	r0, [pc, #68]	@ (80004b8 <main+0x2b4>)
 8000474:	f000 f92e 	bl	80006d4 <UART_print>
		  average = RESET;
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <main+0x29c>)
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
	  if(conversion_ready & (value_count <= TOTAL_DATA_COUNT))
 800047e:	e6da      	b.n	8000236 <main+0x32>
 8000480:	08001848 	.word	0x08001848
 8000484:	50040000 	.word	0x50040000
 8000488:	2000002c 	.word	0x2000002c
 800048c:	20000058 	.word	0x20000058
 8000490:	2000002e 	.word	0x2000002e
 8000494:	20000030 	.word	0x20000030
 8000498:	20000000 	.word	0x20000000
 800049c:	2000005a 	.word	0x2000005a
 80004a0:	2000005c 	.word	0x2000005c
 80004a4:	cccccccd 	.word	0xcccccccd
 80004a8:	08001850 	.word	0x08001850
 80004ac:	51eb851f 	.word	0x51eb851f
 80004b0:	08001858 	.word	0x08001858
 80004b4:	08001860 	.word	0x08001860
 80004b8:	08001868 	.word	0x08001868

080004bc <voltage_calibration>:




uint32_t voltage_calibration(uint32_t volt_reading)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	//calibrated
	return ((812 * volt_reading) - 1600) / 10000;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f44f 724b 	mov.w	r2, #812	@ 0x32c
 80004ca:	fb02 f303 	mul.w	r3, r2, r3
 80004ce:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <voltage_calibration+0x2c>)
 80004d4:	fba2 2303 	umull	r2, r3, r2, r3
 80004d8:	0b5b      	lsrs	r3, r3, #13
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	d1b71759 	.word	0xd1b71759

080004ec <ADC1_2_IRQHandler>:




void ADC1_2_IRQHandler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	//check to see if conversion is done
	if(ADC1->ISR & ADC_ISR_EOC)
 80004f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <ADC1_2_IRQHandler+0x38>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00d      	beq.n	8000518 <ADC1_2_IRQHandler+0x2c>
	{
		//clear flag, set global variable and read into another global variable
		ADC1->ISR &= ~ADC_ISR_EOC;
 80004fc:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <ADC1_2_IRQHandler+0x38>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <ADC1_2_IRQHandler+0x38>)
 8000502:	f023 0304 	bic.w	r3, r3, #4
 8000506:	6013      	str	r3, [r2, #0]
		conversion_ready = 1;
 8000508:	4b07      	ldr	r3, [pc, #28]	@ (8000528 <ADC1_2_IRQHandler+0x3c>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
		reading_data = ADC1->DR;
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <ADC1_2_IRQHandler+0x38>)
 8000510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b05      	ldr	r3, [pc, #20]	@ (800052c <ADC1_2_IRQHandler+0x40>)
 8000516:	801a      	strh	r2, [r3, #0]
	}

}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	50040000 	.word	0x50040000
 8000528:	2000002c 	.word	0x2000002c
 800052c:	2000002e 	.word	0x2000002e

08000530 <ADC_init>:





void ADC_init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
    // Enable the ADC clock
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000536:	4b45      	ldr	r3, [pc, #276]	@ (800064c <ADC_init+0x11c>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a44      	ldr	r2, [pc, #272]	@ (800064c <ADC_init+0x11c>)
 800053c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Set ADC clock to synchronous HCLK / 1
    ADC123_COMMON->CCR = (1 << ADC_CCR_CKMODE_Pos);
 8000542:	4b43      	ldr	r3, [pc, #268]	@ (8000650 <ADC_init+0x120>)
 8000544:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000548:	609a      	str	r2, [r3, #8]

    // Power up the ADC and voltage regulator
    ADC1->CR &= ~ADC_CR_DEEPPWD;
 800054a:	4b42      	ldr	r3, [pc, #264]	@ (8000654 <ADC_init+0x124>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	4a41      	ldr	r2, [pc, #260]	@ (8000654 <ADC_init+0x124>)
 8000550:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000554:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN;
 8000556:	4b3f      	ldr	r3, [pc, #252]	@ (8000654 <ADC_init+0x124>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	4a3e      	ldr	r2, [pc, #248]	@ (8000654 <ADC_init+0x124>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000560:	6093      	str	r3, [r2, #8]

    // Wait for 20 µs for the voltage regulator to stabilize
    for (uint32_t i = 0; i < 50000; i++);
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	e002      	b.n	800056e <ADC_init+0x3e>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3301      	adds	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000574:	4293      	cmp	r3, r2
 8000576:	d9f7      	bls.n	8000568 <ADC_init+0x38>

    // Configure PA0 as analog input
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000578:	4b34      	ldr	r3, [pc, #208]	@ (800064c <ADC_init+0x11c>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057c:	4a33      	ldr	r2, [pc, #204]	@ (800064c <ADC_init+0x11c>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOA->MODER |= (GPIO_MODER_MODE0);  // PA0 in analog mode
 8000584:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800058e:	f043 0303 	orr.w	r3, r3, #3
 8000592:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);
 8000594:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800059e:	f023 0303 	bic.w	r3, r3, #3
 80005a2:	60d3      	str	r3, [r2, #12]
    GPIOA->ASCR |= GPIO_ASCR_ASC0;  // Enable analog switch for PA0
 80005a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Single-ended mode for channel 5 (PA0)
    ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 80005b4:	4b27      	ldr	r3, [pc, #156]	@ (8000654 <ADC_init+0x124>)
 80005b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80005ba:	4a26      	ldr	r2, [pc, #152]	@ (8000654 <ADC_init+0x124>)
 80005bc:	f023 0320 	bic.w	r3, r3, #32
 80005c0:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    // Calibrate the ADC
    ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // Ensure ADC is disabled and single-ended calibration
 80005c4:	4b23      	ldr	r3, [pc, #140]	@ (8000654 <ADC_init+0x124>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	4a22      	ldr	r2, [pc, #136]	@ (8000654 <ADC_init+0x124>)
 80005ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <ADC_init+0x124>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000654 <ADC_init+0x124>)
 80005da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005de:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // Wait for calibration to complete
 80005e0:	bf00      	nop
 80005e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <ADC_init+0x124>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	dbfb      	blt.n	80005e2 <ADC_init+0xb2>

    // Enable the ADC
    ADC1->ISR |= (ADC_ISR_ADRDY); // Clear ready bit
 80005ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <ADC_init+0x124>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a19      	ldr	r2, [pc, #100]	@ (8000654 <ADC_init+0x124>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6013      	str	r3, [r2, #0]
    ADC1->CR |= (ADC_CR_ADEN);
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <ADC_init+0x124>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <ADC_init+0x124>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC to be ready
 8000602:	bf00      	nop
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <ADC_init+0x124>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f9      	beq.n	8000604 <ADC_init+0xd4>

    // Configure sequence for single channel (channel 5)
    ADC1->SQR1 = (5 << ADC_SQR1_SQ1_Pos);
 8000610:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <ADC_init+0x124>)
 8000612:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000616:	631a      	str	r2, [r3, #48]	@ 0x30

    // Configure for single conversion, 12-bit resolution, right-aligned data
    ADC1->CFGR = 0;
 8000618:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <ADC_init+0x124>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]

    // Configure sample time to 2.5 ADC clock cycles
    ADC1->SMPR1 &= ~(ADC_SMPR1_SMP5);
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <ADC_init+0x124>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a0c      	ldr	r2, [pc, #48]	@ (8000654 <ADC_init+0x124>)
 8000624:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 8000628:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= (0 << ADC_SMPR1_SMP5_Pos); // 2.5 cycles for channel 5
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <ADC_init+0x124>)
 800062c:	4a09      	ldr	r2, [pc, #36]	@ (8000654 <ADC_init+0x124>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	6153      	str	r3, [r2, #20]

    // Enable end-of-conversion interrupt
    ADC1->IER |= (ADC_IER_EOC);
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <ADC_init+0x124>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4a07      	ldr	r2, [pc, #28]	@ (8000654 <ADC_init+0x124>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6053      	str	r3, [r2, #4]
    // Clear the EOC flag
    //ADC1->ISR |= ADC_ISR_EOC;
    // Enable ADC interrupt in NVIC
    NVIC_EnableIRQ(ADC1_2_IRQn);
 800063e:	2012      	movs	r0, #18
 8000640:	f7ff fdc2 	bl	80001c8 <__NVIC_EnableIRQ>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	50040300 	.word	0x50040300
 8000654:	50040000 	.word	0x50040000

08000658 <UART_init>:



void UART_init(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	 // Enable clocks for GPIOA and USART2
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   // Enable GPIOA clock
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <UART_init+0x74>)
 800065e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000660:	4a1a      	ldr	r2, [pc, #104]	@ (80006cc <UART_init+0x74>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // Enable USART2 clock
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <UART_init+0x74>)
 800066a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066c:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <UART_init+0x74>)
 800066e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000672:	6593      	str	r3, [r2, #88]	@ 0x58

	// Configure PA2 as USART2_TX and PA3 as USART2_RX
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3); // Clear mode bits
 8000674:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800067e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000682:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1); // Set alternate function mode
 8000684:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800068e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000692:	6013      	str	r3, [r2, #0]

//	GPIOA->AFR[0] |= ~(GPIO_AFRL_AFSEL2_3);  // Set AF7 (USART2) for PA2
//	GPIOA->AFR[0] |= ~(GPIO_AFRL_AFSEL3_3); // Set AF7 (USART2) for PA3

	GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL2_Pos); // Set AF7 (USART2) for PA2
 8000694:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000698:	6a1b      	ldr	r3, [r3, #32]
 800069a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800069e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80006a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL3_Pos); // Set AF7 (USART2) for PA3
 80006a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006a8:	6a1b      	ldr	r3, [r3, #32]
 80006aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006ae:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80006b2:	6213      	str	r3, [r2, #32]

	// Configure USART2 for 115200 baud rate (assuming 4 MHz clock)
	USART2->BRR = 208; // Set baud rate divisor for 115200 baud (4 MHz / (16 * 115200) ≈ 35)
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <UART_init+0x78>)
 80006b6:	22d0      	movs	r2, #208	@ 0xd0
 80006b8:	60da      	str	r2, [r3, #12]

	// Enable USART2, transmitter, and receiver and receive data register
	USART2->CR1 = (USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE);
 80006ba:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <UART_init+0x78>)
 80006bc:	222d      	movs	r2, #45	@ 0x2d
 80006be:	601a      	str	r2, [r3, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40004400 	.word	0x40004400

080006d4 <UART_print>:


void UART_print(char *str)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	while (*str != '\0')
 80006dc:	e00c      	b.n	80006f8 <UART_print+0x24>
	{               // Loop until the end of the string
		while (!(USART2->ISR & USART_ISR_TXE)) {}
 80006de:	bf00      	nop
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <UART_print+0x3c>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f9      	beq.n	80006e0 <UART_print+0xc>
		USART2->TDR = *str++;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <UART_print+0x3c>)
 80006f6:	851a      	strh	r2, [r3, #40]	@ 0x28
	while (*str != '\0')
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1ee      	bne.n	80006de <UART_print+0xa>
	}

}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40004400 	.word	0x40004400

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	@ 0x58
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2244      	movs	r2, #68	@ 0x44
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f858 	bl	80017d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000736:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800073a:	f000 fa2f 	bl	8000b9c <HAL_PWREx_ControlVoltageScaling>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000744:	f000 f82c 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000748:	2310      	movs	r3, #16
 800074a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000754:	2390      	movs	r3, #144	@ 0x90
 8000756:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fa71 	bl	8000c48 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800076c:	f000 f818 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fe39 	bl	8001400 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000794:	f000 f804 	bl	80007a0 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3758      	adds	r7, #88	@ 0x58
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <NMI_Handler+0x4>

080007fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <MemManage_Handler+0x4>

0800080c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <UsageFault_Handler+0x4>

0800081c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084a:	f000 f893 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff ffea 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	@ (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	@ (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f000 ff9f 	bl	80017e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008aa:	f7ff fcab 	bl	8000204 <main>

080008ae <LoopForever>:

LoopForever:
    b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008bc:	080018b4 	.word	0x080018b4
  ldr r2, =_sbss
 80008c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008c4:	20000064 	.word	0x20000064

080008c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC3_IRQHandler>

080008ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f91f 	bl	8000b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f80e 	bl	80008fc <HAL_InitTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	e001      	b.n	80008f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ec:	f7ff ff5e 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_InitTick+0x6c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d023      	beq.n	8000958 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <HAL_InitTick+0x70>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_InitTick+0x6c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f91d 	bl	8000b66 <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10f      	bne.n	8000952 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d809      	bhi.n	800094c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000940:	f000 f8f5 	bl	8000b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000944:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <HAL_InitTick+0x74>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	e007      	b.n	800095c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e004      	b.n	800095c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e001      	b.n	800095c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000000c 	.word	0x2000000c
 800096c:	20000004 	.word	0x20000004
 8000970:	20000008 	.word	0x20000008

08000974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	2000000c 	.word	0x2000000c
 8000998:	20000060 	.word	0x20000060

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000060 	.word	0x20000060

080009b4 <__NVIC_SetPriorityGrouping>:
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	@ (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	@ (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	@ 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	@ 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ae4:	d301      	bcc.n	8000aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00f      	b.n	8000b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <SysTick_Config+0x40>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af2:	210f      	movs	r1, #15
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af8:	f7ff ff8e 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SysTick_Config+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <SysTick_Config+0x40>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ff47 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b40:	f7ff ff5c 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f7ff ff8e 	bl	8000a6c <NVIC_EncodePriority>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5d 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ffb0 	bl	8000ad4 <SysTick_Config>
 8000b74:	4603      	mov	r3, r0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40007000 	.word	0x40007000

08000b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000baa:	d130      	bne.n	8000c0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bac:	4b23      	ldr	r3, [pc, #140]	@ (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bb8:	d038      	beq.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bba:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2232      	movs	r2, #50	@ 0x32
 8000bd0:	fb02 f303 	mul.w	r3, r2, r3
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	0c9b      	lsrs	r3, r3, #18
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000be0:	e002      	b.n	8000be8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bf4:	d102      	bne.n	8000bfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f2      	bne.n	8000be2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c08:	d110      	bne.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e00f      	b.n	8000c2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c1a:	d007      	beq.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c24:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40007000 	.word	0x40007000
 8000c40:	20000004 	.word	0x20000004
 8000c44:	431bde83 	.word	0x431bde83

08000c48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e3ca      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c5a:	4b97      	ldr	r3, [pc, #604]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
 8000c62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c64:	4b94      	ldr	r3, [pc, #592]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 80e4 	beq.w	8000e44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d007      	beq.n	8000c92 <HAL_RCC_OscConfig+0x4a>
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	2b0c      	cmp	r3, #12
 8000c86:	f040 808b 	bne.w	8000da0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	f040 8087 	bne.w	8000da0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c92:	4b89      	ldr	r3, [pc, #548]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <HAL_RCC_OscConfig+0x62>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e3a2      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a1a      	ldr	r2, [r3, #32]
 8000cae:	4b82      	ldr	r3, [pc, #520]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x7c>
 8000cba:	4b7f      	ldr	r3, [pc, #508]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cc2:	e005      	b.n	8000cd0 <HAL_RCC_OscConfig+0x88>
 8000cc4:	4b7c      	ldr	r3, [pc, #496]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d223      	bcs.n	8000d1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fd1d 	bl	8001718 <RCC_SetFlashLatencyFromMSIRange>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e383      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ce8:	4b73      	ldr	r3, [pc, #460]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a72      	ldr	r2, [pc, #456]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b70      	ldr	r3, [pc, #448]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	496d      	ldr	r1, [pc, #436]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d06:	4b6c      	ldr	r3, [pc, #432]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	4968      	ldr	r1, [pc, #416]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	604b      	str	r3, [r1, #4]
 8000d1a:	e025      	b.n	8000d68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d1c:	4b66      	ldr	r3, [pc, #408]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a65      	ldr	r2, [pc, #404]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b63      	ldr	r3, [pc, #396]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4960      	ldr	r1, [pc, #384]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d36:	4313      	orrs	r3, r2
 8000d38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	495b      	ldr	r1, [pc, #364]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fcdd 	bl	8001718 <RCC_SetFlashLatencyFromMSIRange>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e343      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d68:	f000 fc4a 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b52      	ldr	r3, [pc, #328]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	4950      	ldr	r1, [pc, #320]	@ (8000ebc <HAL_RCC_OscConfig+0x274>)
 8000d7a:	5ccb      	ldrb	r3, [r1, r3]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	4a4e      	ldr	r2, [pc, #312]	@ (8000ec0 <HAL_RCC_OscConfig+0x278>)
 8000d86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d88:	4b4e      	ldr	r3, [pc, #312]	@ (8000ec4 <HAL_RCC_OscConfig+0x27c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fdb5 	bl	80008fc <HAL_InitTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d052      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	e327      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d032      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000da8:	4b43      	ldr	r3, [pc, #268]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a42      	ldr	r2, [pc, #264]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000db4:	f7ff fdf2 	bl	800099c <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fdee 	bl	800099c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e310      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dce:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dda:	4b37      	ldr	r3, [pc, #220]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a36      	ldr	r2, [pc, #216]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b34      	ldr	r3, [pc, #208]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4931      	ldr	r1, [pc, #196]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df8:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	492c      	ldr	r1, [pc, #176]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
 8000e0c:	e01a      	b.n	8000e44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a29      	ldr	r2, [pc, #164]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fdbf 	bl	800099c <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e22:	f7ff fdbb 	bl	800099c <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e2dd      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f0      	bne.n	8000e22 <HAL_RCC_OscConfig+0x1da>
 8000e40:	e000      	b.n	8000e44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d074      	beq.n	8000f3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2b08      	cmp	r3, #8
 8000e54:	d005      	beq.n	8000e62 <HAL_RCC_OscConfig+0x21a>
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	2b0c      	cmp	r3, #12
 8000e5a:	d10e      	bne.n	8000e7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d10b      	bne.n	8000e7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d064      	beq.n	8000f38 <HAL_RCC_OscConfig+0x2f0>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d160      	bne.n	8000f38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e2ba      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x24a>
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e026      	b.n	8000ee0 <HAL_RCC_OscConfig+0x298>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e9a:	d115      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x280>
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a02      	ldr	r2, [pc, #8]	@ (8000eb8 <HAL_RCC_OscConfig+0x270>)
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e014      	b.n	8000ee0 <HAL_RCC_OscConfig+0x298>
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	0800186c 	.word	0x0800186c
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a9f      	ldr	r2, [pc, #636]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b9d      	ldr	r3, [pc, #628]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a9c      	ldr	r2, [pc, #624]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d013      	beq.n	8000f10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fd58 	bl	800099c <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fd54 	bl	800099c <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	@ 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e276      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f02:	4b92      	ldr	r3, [pc, #584]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x2a8>
 8000f0e:	e014      	b.n	8000f3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f10:	f7ff fd44 	bl	800099c <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fd40 	bl	800099c <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	@ 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e262      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f2a:	4b88      	ldr	r3, [pc, #544]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2d0>
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d060      	beq.n	8001008 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d005      	beq.n	8000f58 <HAL_RCC_OscConfig+0x310>
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2b0c      	cmp	r3, #12
 8000f50:	d119      	bne.n	8000f86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d116      	bne.n	8000f86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f58:	4b7c      	ldr	r3, [pc, #496]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <HAL_RCC_OscConfig+0x328>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e23f      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f70:	4b76      	ldr	r3, [pc, #472]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	4973      	ldr	r1, [pc, #460]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f84:	e040      	b.n	8001008 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d023      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6e      	ldr	r2, [pc, #440]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fcff 	bl	800099c <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fcfb 	bl	800099c <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e21d      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fb4:	4b65      	ldr	r3, [pc, #404]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	4b62      	ldr	r3, [pc, #392]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	061b      	lsls	r3, r3, #24
 8000fce:	495f      	ldr	r1, [pc, #380]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
 8000fd4:	e018      	b.n	8001008 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a5c      	ldr	r2, [pc, #368]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fcdb 	bl	800099c <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fcd7 	bl	800099c <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e1f9      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ffc:	4b53      	ldr	r3, [pc, #332]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f0      	bne.n	8000fea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	2b00      	cmp	r3, #0
 8001012:	d03c      	beq.n	800108e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d01c      	beq.n	8001056 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101c:	4b4b      	ldr	r3, [pc, #300]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 800101e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001022:	4a4a      	ldr	r2, [pc, #296]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800102c:	f7ff fcb6 	bl	800099c <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fcb2 	bl	800099c <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e1d4      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001046:	4b41      	ldr	r3, [pc, #260]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8001048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ef      	beq.n	8001034 <HAL_RCC_OscConfig+0x3ec>
 8001054:	e01b      	b.n	800108e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001056:	4b3d      	ldr	r3, [pc, #244]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8001058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105c:	4a3b      	ldr	r2, [pc, #236]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001066:	f7ff fc99 	bl	800099c <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106e:	f7ff fc95 	bl	800099c <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e1b7      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001080:	4b32      	ldr	r3, [pc, #200]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8001082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1ef      	bne.n	800106e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80a6 	beq.w	80011e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010a0:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 80010a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10d      	bne.n	80010c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b0:	4a26      	ldr	r2, [pc, #152]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 80010ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c4:	2301      	movs	r3, #1
 80010c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c8:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_RCC_OscConfig+0x508>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d118      	bne.n	8001106 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_RCC_OscConfig+0x508>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001150 <HAL_RCC_OscConfig+0x508>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e0:	f7ff fc5c 	bl	800099c <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e8:	f7ff fc58 	bl	800099c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e17a      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_RCC_OscConfig+0x508>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <HAL_RCC_OscConfig+0x4d8>
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8001110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800111e:	e029      	b.n	8001174 <HAL_RCC_OscConfig+0x52c>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b05      	cmp	r3, #5
 8001126:	d115      	bne.n	8001154 <HAL_RCC_OscConfig+0x50c>
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 800112a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800112e:	4a07      	ldr	r2, [pc, #28]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 800113a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800113e:	4a03      	ldr	r2, [pc, #12]	@ (800114c <HAL_RCC_OscConfig+0x504>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001148:	e014      	b.n	8001174 <HAL_RCC_OscConfig+0x52c>
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40007000 	.word	0x40007000
 8001154:	4b9c      	ldr	r3, [pc, #624]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115a:	4a9b      	ldr	r2, [pc, #620]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001164:	4b98      	ldr	r3, [pc, #608]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800116a:	4a97      	ldr	r2, [pc, #604]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d016      	beq.n	80011aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117c:	f7ff fc0e 	bl	800099c <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001182:	e00a      	b.n	800119a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001184:	f7ff fc0a 	bl	800099c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e12a      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800119a:	4b8b      	ldr	r3, [pc, #556]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800119c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0ed      	beq.n	8001184 <HAL_RCC_OscConfig+0x53c>
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011aa:	f7ff fbf7 	bl	800099c <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fbf3 	bl	800099c <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e113      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011c8:	4b7f      	ldr	r3, [pc, #508]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 80011ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1ed      	bne.n	80011b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d105      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011dc:	4b7a      	ldr	r3, [pc, #488]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e0:	4a79      	ldr	r2, [pc, #484]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 80011e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80fe 	beq.w	80013ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	f040 80d0 	bne.w	800139c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011fc:	4b72      	ldr	r3, [pc, #456]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120c:	429a      	cmp	r2, r3
 800120e:	d130      	bne.n	8001272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	3b01      	subs	r3, #1
 800121c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d127      	bne.n	8001272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800122c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800122e:	429a      	cmp	r2, r3
 8001230:	d11f      	bne.n	8001272 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800123c:	2a07      	cmp	r2, #7
 800123e:	bf14      	ite	ne
 8001240:	2201      	movne	r2, #1
 8001242:	2200      	moveq	r2, #0
 8001244:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001246:	4293      	cmp	r3, r2
 8001248:	d113      	bne.n	8001272 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001254:	085b      	lsrs	r3, r3, #1
 8001256:	3b01      	subs	r3, #1
 8001258:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800125a:	429a      	cmp	r2, r3
 800125c:	d109      	bne.n	8001272 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	3b01      	subs	r3, #1
 800126c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800126e:	429a      	cmp	r2, r3
 8001270:	d06e      	beq.n	8001350 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d069      	beq.n	800134c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001278:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001284:	4b50      	ldr	r3, [pc, #320]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0ad      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001294:	4b4c      	ldr	r3, [pc, #304]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a4b      	ldr	r2, [pc, #300]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800129a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800129e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012a0:	f7ff fb7c 	bl	800099c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fb78 	bl	800099c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e09a      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ba:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c6:	4b40      	ldr	r3, [pc, #256]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	4b40      	ldr	r3, [pc, #256]	@ (80013cc <HAL_RCC_OscConfig+0x784>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012d6:	3a01      	subs	r2, #1
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	4311      	orrs	r1, r2
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012e0:	0212      	lsls	r2, r2, #8
 80012e2:	4311      	orrs	r1, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80012e8:	0852      	lsrs	r2, r2, #1
 80012ea:	3a01      	subs	r2, #1
 80012ec:	0552      	lsls	r2, r2, #21
 80012ee:	4311      	orrs	r1, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012f4:	0852      	lsrs	r2, r2, #1
 80012f6:	3a01      	subs	r2, #1
 80012f8:	0652      	lsls	r2, r2, #25
 80012fa:	4311      	orrs	r1, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001300:	0912      	lsrs	r2, r2, #4
 8001302:	0452      	lsls	r2, r2, #17
 8001304:	430a      	orrs	r2, r1
 8001306:	4930      	ldr	r1, [pc, #192]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001308:	4313      	orrs	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800130c:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2d      	ldr	r2, [pc, #180]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001316:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001318:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a2a      	ldr	r2, [pc, #168]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001322:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001324:	f7ff fb3a 	bl	800099c <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff fb36 	bl	800099c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e058      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800133e:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800134a:	e050      	b.n	80013ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e04f      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d148      	bne.n	80013ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800135c:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001366:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4a16      	ldr	r2, [pc, #88]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001372:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001374:	f7ff fb12 	bl	800099c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fb0e 	bl	800099c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e030      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x734>
 800139a:	e028      	b.n	80013ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d023      	beq.n	80013ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_RCC_OscConfig+0x780>)
 80013a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff faf5 	bl	800099c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b4:	e00c      	b.n	80013d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff faf1 	bl	800099c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d905      	bls.n	80013d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e013      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_RCC_OscConfig+0x7b0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ec      	bne.n	80013b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_RCC_OscConfig+0x7b0>)
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	4905      	ldr	r1, [pc, #20]	@ (80013f8 <HAL_RCC_OscConfig+0x7b0>)
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_RCC_OscConfig+0x7b4>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	60cb      	str	r3, [r1, #12]
 80013e8:	e001      	b.n	80013ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	feeefffc 	.word	0xfeeefffc

08001400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0e7      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001414:	4b75      	ldr	r3, [pc, #468]	@ (80015ec <HAL_RCC_ClockConfig+0x1ec>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d910      	bls.n	8001444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b72      	ldr	r3, [pc, #456]	@ (80015ec <HAL_RCC_ClockConfig+0x1ec>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 0207 	bic.w	r2, r3, #7
 800142a:	4970      	ldr	r1, [pc, #448]	@ (80015ec <HAL_RCC_ClockConfig+0x1ec>)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b6e      	ldr	r3, [pc, #440]	@ (80015ec <HAL_RCC_ClockConfig+0x1ec>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0cf      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d010      	beq.n	8001472 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4b66      	ldr	r3, [pc, #408]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800145c:	429a      	cmp	r2, r3
 800145e:	d908      	bls.n	8001472 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b63      	ldr	r3, [pc, #396]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4960      	ldr	r1, [pc, #384]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d04c      	beq.n	8001518 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001486:	4b5a      	ldr	r3, [pc, #360]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d121      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0a6      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	4b54      	ldr	r3, [pc, #336]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d115      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e09a      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b6:	4b4e      	ldr	r3, [pc, #312]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e08e      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c6:	4b4a      	ldr	r3, [pc, #296]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e086      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b46      	ldr	r3, [pc, #280]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4943      	ldr	r1, [pc, #268]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014e8:	f7ff fa58 	bl	800099c <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff fa54 	bl	800099c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e06e      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d010      	beq.n	8001546 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001530:	429a      	cmp	r2, r3
 8001532:	d208      	bcs.n	8001546 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001534:	4b2e      	ldr	r3, [pc, #184]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	492b      	ldr	r1, [pc, #172]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001546:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <HAL_RCC_ClockConfig+0x1ec>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d210      	bcs.n	8001576 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001554:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <HAL_RCC_ClockConfig+0x1ec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 0207 	bic.w	r2, r3, #7
 800155c:	4923      	ldr	r1, [pc, #140]	@ (80015ec <HAL_RCC_ClockConfig+0x1ec>)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001564:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_RCC_ClockConfig+0x1ec>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e036      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001582:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4918      	ldr	r1, [pc, #96]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4910      	ldr	r1, [pc, #64]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015b4:	f000 f824 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <HAL_RCC_ClockConfig+0x1f0>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	490b      	ldr	r1, [pc, #44]	@ (80015f4 <HAL_RCC_ClockConfig+0x1f4>)
 80015c6:	5ccb      	ldrb	r3, [r1, r3]
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	4a09      	ldr	r2, [pc, #36]	@ (80015f8 <HAL_RCC_ClockConfig+0x1f8>)
 80015d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_RCC_ClockConfig+0x1fc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f98f 	bl	80008fc <HAL_InitTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80015e2:	7afb      	ldrb	r3, [r7, #11]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40022000 	.word	0x40022000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	0800186c 	.word	0x0800186c
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	@ 0x24
 8001604:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001618:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0x34>
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b0c      	cmp	r3, #12
 800162c:	d121      	bne.n	8001672 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d11e      	bne.n	8001672 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001640:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e005      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001650:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800165c:	4a2b      	ldr	r2, [pc, #172]	@ (800170c <HAL_RCC_GetSysClockFreq+0x10c>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d102      	bne.n	800167e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <HAL_RCC_GetSysClockFreq+0x110>)
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	e004      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d101      	bne.n	8001688 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001684:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x114>)
 8001686:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d134      	bne.n	80016f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d003      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d003      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0xac>
 80016a4:	e005      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <HAL_RCC_GetSysClockFreq+0x110>)
 80016a8:	617b      	str	r3, [r7, #20]
      break;
 80016aa:	e005      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x114>)
 80016ae:	617b      	str	r3, [r7, #20]
      break;
 80016b0:	e002      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	617b      	str	r3, [r7, #20]
      break;
 80016b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	3301      	adds	r3, #1
 80016c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	fb03 f202 	mul.w	r2, r3, r2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x108>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	0e5b      	lsrs	r3, r3, #25
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	3301      	adds	r3, #1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016f8:	69bb      	ldr	r3, [r7, #24]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	@ 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	0800187c 	.word	0x0800187c
 8001710:	00f42400 	.word	0x00f42400
 8001714:	007a1200 	.word	0x007a1200

08001718 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001724:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001730:	f7ff fa26 	bl	8000b80 <HAL_PWREx_GetVoltageRange>
 8001734:	6178      	str	r0, [r7, #20]
 8001736:	e014      	b.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	4a24      	ldr	r2, [pc, #144]	@ (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800173e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001742:	6593      	str	r3, [r2, #88]	@ 0x58
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001750:	f7ff fa16 	bl	8000b80 <HAL_PWREx_GetVoltageRange>
 8001754:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001756:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	4a1d      	ldr	r2, [pc, #116]	@ (80017d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800175c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001768:	d10b      	bne.n	8001782 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b80      	cmp	r3, #128	@ 0x80
 800176e:	d919      	bls.n	80017a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2ba0      	cmp	r3, #160	@ 0xa0
 8001774:	d902      	bls.n	800177c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001776:	2302      	movs	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	e013      	b.n	80017a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800177c:	2301      	movs	r3, #1
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	e010      	b.n	80017a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b80      	cmp	r3, #128	@ 0x80
 8001786:	d902      	bls.n	800178e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001788:	2303      	movs	r3, #3
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	e00a      	b.n	80017a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b80      	cmp	r3, #128	@ 0x80
 8001792:	d102      	bne.n	800179a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001794:	2302      	movs	r3, #2
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	e004      	b.n	80017a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b70      	cmp	r3, #112	@ 0x70
 800179e:	d101      	bne.n	80017a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 0207 	bic.w	r2, r3, #7
 80017ac:	4909      	ldr	r1, [pc, #36]	@ (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40022000 	.word	0x40022000

080017d8 <memset>:
 80017d8:	4402      	add	r2, r0
 80017da:	4603      	mov	r3, r0
 80017dc:	4293      	cmp	r3, r2
 80017de:	d100      	bne.n	80017e2 <memset+0xa>
 80017e0:	4770      	bx	lr
 80017e2:	f803 1b01 	strb.w	r1, [r3], #1
 80017e6:	e7f9      	b.n	80017dc <memset+0x4>

080017e8 <__libc_init_array>:
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	4d0d      	ldr	r5, [pc, #52]	@ (8001820 <__libc_init_array+0x38>)
 80017ec:	4c0d      	ldr	r4, [pc, #52]	@ (8001824 <__libc_init_array+0x3c>)
 80017ee:	1b64      	subs	r4, r4, r5
 80017f0:	10a4      	asrs	r4, r4, #2
 80017f2:	2600      	movs	r6, #0
 80017f4:	42a6      	cmp	r6, r4
 80017f6:	d109      	bne.n	800180c <__libc_init_array+0x24>
 80017f8:	4d0b      	ldr	r5, [pc, #44]	@ (8001828 <__libc_init_array+0x40>)
 80017fa:	4c0c      	ldr	r4, [pc, #48]	@ (800182c <__libc_init_array+0x44>)
 80017fc:	f000 f818 	bl	8001830 <_init>
 8001800:	1b64      	subs	r4, r4, r5
 8001802:	10a4      	asrs	r4, r4, #2
 8001804:	2600      	movs	r6, #0
 8001806:	42a6      	cmp	r6, r4
 8001808:	d105      	bne.n	8001816 <__libc_init_array+0x2e>
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001810:	4798      	blx	r3
 8001812:	3601      	adds	r6, #1
 8001814:	e7ee      	b.n	80017f4 <__libc_init_array+0xc>
 8001816:	f855 3b04 	ldr.w	r3, [r5], #4
 800181a:	4798      	blx	r3
 800181c:	3601      	adds	r6, #1
 800181e:	e7f2      	b.n	8001806 <__libc_init_array+0x1e>
 8001820:	080018ac 	.word	0x080018ac
 8001824:	080018ac 	.word	0x080018ac
 8001828:	080018ac 	.word	0x080018ac
 800182c:	080018b0 	.word	0x080018b0

08001830 <_init>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	bf00      	nop
 8001834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001836:	bc08      	pop	{r3}
 8001838:	469e      	mov	lr, r3
 800183a:	4770      	bx	lr

0800183c <_fini>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr
